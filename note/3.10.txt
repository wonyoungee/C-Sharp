 <3/10>

 다형성 (상속관계에서 존재)
 다형성 : 여러가지 성질(형태)를 가질 수 있는 능력
 c# : 다형성 (overloading , override) ...
 
 [상속관계] 에서 [하나의 참조변수] 가 [여러개의 타입]을 가질 수 있다 
 [하나의 참조변수] >> [부모타입]
 부모클래스 타입의 참조변수가 여러개의 자식클래스 객체를 담을 수 있다
 자식이 부모에게 조건 없이 드린다 >> 다형성

 
 <클래스 다이어그램>
 - 연관이면 member field로 옴.
  -복합연관(composition) : 두 클래스의 Lifecycle 같음 (ex. 자동차-엔진간의 간계)
  -집합연관(aggregation) : (부분집합) 두 클래스의 Lifecycle 다름 (ex. 학교-학생간의 관계)

  - 클래스 그림에서 부모 / 자식 둘 다 같은 함수 써져있으면 -> virtual - override 함수
  
  - <실체화>에서 동그라미 : 추상자원 가지고 있지 X

 <의존>
 - 유저는 스케쥴에 의존합니다.
 - 함수안에서 new 스케쥴() 할 수 있음, 스케쥴을 지역변수로 가질 수 있음, 파라미터로 받을 수 있음.
 - "함수 안"에서 의존.


 <익명타입>
  -  클래스를 미리 정의하지 않고 사용할 수 있게 하는 익명타입(Anonymous Type)
  - 읽기 전용
  -  new { ... } 와 같은 형식을 사용하며, new 블럭안에 속성=값 할당을 하고, 각 속성/값은 콤마로 분리
  - 익명 타입 객체를 변수에 할당할 때는 특별히 타입명이 없으므로 var를 사용



  <람다식(Lambda Expression)>
  - 무명 함수(anonymous function)를 표현
  - 입력 파라미터(0개 ~ N개)를 => 연산자 왼쪽에, 실행 문장들을 => 연산자 오른쪽에 둔다.